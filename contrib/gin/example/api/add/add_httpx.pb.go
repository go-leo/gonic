// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/add/add.proto

package add

import (
	context "context"
	gors "github.com/go-leo/gors"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddClient is the client API for Add service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddClient interface {
	// #HTTP @Method("GET","POST")
	// #HTTP @Path("/")
	// #HTTP @Consume("")
	// #HTTP @Produce("")
	// #HTTP @PathParam("a",default:"1",encoded),@PathParam("b")
	// #HTTP @QueryParam("a"),@QueryParams("b")
	// #HTTP @FormParam("a"),@FormParam("b")
	// #HTTP @BeanParam("*"),
	// #HTTP @HeaderParam("a"),@HeaderParam("b")
	// #HTTP @CookieParam("a"),@CookieParam("b")
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error)
	// #HTTP @Method("GET","POST")
	// #HTTP @Path("/")
	// #HTTP @Consumes("","")
	// #HTTP @Produces("","")
	// #HTTP @PathParam("a"),@PathParam("b")
	// #HTTP @QueryParam("a"),@QueryParams("b")
	// #HTTP @FormParam("a"),@FormParam("b")
	// #HTTP @HeaderParam("a"),@HeaderParam("b")
	// #HTTP @CookieParam("a"),@CookieParam("b")
	Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error)
}

type addClient struct {
	cc grpc.ClientConnInterface
}

func NewAddClient(cc grpc.ClientConnInterface) AddClient {
	return &addClient{cc}
}

func (c *addClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReply, error) {
	out := new(SumReply)
	err := c.cc.Invoke(ctx, "/add.Add/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addClient) Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error) {
	out := new(ConcatReply)
	err := c.cc.Invoke(ctx, "/add.Add/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServer is the server API for Add service.
// All implementations must embed UnimplementedAddServer
// for forward compatibility
type AddServer interface {
	// #HTTP @Method("GET","POST")
	// #HTTP @Path("/")
	// #HTTP @Consume("")
	// #HTTP @Produce("")
	// #HTTP @PathParam("a",default:"1",encoded),@PathParam("b")
	// #HTTP @QueryParam("a"),@QueryParams("b")
	// #HTTP @FormParam("a"),@FormParam("b")
	// #HTTP @BeanParam("*"),
	// #HTTP @HeaderParam("a"),@HeaderParam("b")
	// #HTTP @CookieParam("a"),@CookieParam("b")
	Sum(context.Context, *SumRequest) (*SumReply, error)
	// #HTTP @Method("GET","POST")
	// #HTTP @Path("/")
	// #HTTP @Consumes("","")
	// #HTTP @Produces("","")
	// #HTTP @PathParam("a"),@PathParam("b")
	// #HTTP @QueryParam("a"),@QueryParams("b")
	// #HTTP @FormParam("a"),@FormParam("b")
	// #HTTP @HeaderParam("a"),@HeaderParam("b")
	// #HTTP @CookieParam("a"),@CookieParam("b")
	Concat(context.Context, *ConcatRequest) (*ConcatReply, error)
	mustEmbedUnimplementedAddServer()
}

// UnimplementedAddServer must be embedded to have forward compatible implementations.
type UnimplementedAddServer struct {
}

func (UnimplementedAddServer) Sum(context.Context, *SumRequest) (*SumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedAddServer) Concat(context.Context, *ConcatRequest) (*ConcatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concat not implemented")
}
func (UnimplementedAddServer) mustEmbedUnimplementedAddServer() {}

// UnsafeAddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddServer will
// result in compilation errors.
type UnsafeAddServer interface {
	mustEmbedUnimplementedAddServer()
}

func RegisterAddHTTPServer(s gors.ServiceRegistrar, srv AddServer) {
	s.RegisterService(&Add_HTTP_ServiceDesc, srv)
}

func _Add_Sum_HTTP_Handler(srv interface{}, ctx context.Context, info *gors.ServerInfo, dec func(interface{}) error, interceptor gors.ServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServer).Sum(ctx, in)
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Add_Concat_HTTP_Handler(srv interface{}, ctx context.Context, info *gors.ServerInfo, dec func(interface{}) error, interceptor gors.ServerInterceptor) (interface{}, error) {
	in := new(ConcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServer).Concat(ctx, in)
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServer).Concat(ctx, req.(*ConcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Add_HTTP_ServiceDesc is the gors.ServiceDesc for Add service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Add_HTTP_ServiceDesc = gors.ServiceDesc{
	ServiceName:     "add.Add",
	HandlerType:     (*AddServer)(nil),
	ApplicationPath: "add.Add",
	Consume:         "add.Add",
	Produce:         "add.Add",
	Routes: []gors.Route{
		{
			Consume:    "Sum",
			Produce:    "Sum",
			QueryKeys:  nil,
			FormKeys:   nil,
			HeaderKeys: nil,
			CookieKeys: nil,
			Methods:    nil,
			Path:       "Sum",
			Handler:    _Add_Sum_HTTP_Handler,
		},
		{
			Consume:    "Concat",
			Produce:    "Concat",
			QueryKeys:  nil,
			FormKeys:   nil,
			HeaderKeys: nil,
			CookieKeys: nil,
			Methods:    nil,
			Path:       "Concat",
			Handler:    _Add_Concat_HTTP_Handler,
		},
	},
}
