// Code generated by protoc-gen-go-gors. DO NOT EDIT.

package hellowrapper

import (
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

func GreeterClientRoutes(cli GreeterClient, opts ...gors.Option) []gors.Route {
	options := gors.New(opts...)
	_ = options
	if len(options.Tag) == 0 {
		options.Tag = "json"
	}
	return []gors.Route{
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/ProtoBufBinding/ProtoBufRender",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTProtoBufBindingProtoBufRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoBufBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTProtoBufBindingProtoBufRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoBufRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/ProtoJSONBinding/ProtoJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTProtoJSONBindingProtoJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTProtoJSONBindingProtoJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/hellowrapper.Greeter/NotDefine",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/NotDefine"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.NotDefine(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/Error",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTError"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTError(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/GRPCStatus",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTGRPCStatus"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTGRPCStatus(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
	}
}

func GreeterServerRoutes(srv GreeterServer, opts ...gors.Option) []gors.Route {
	options := gors.New(opts...)
	_ = options
	if len(options.Tag) == 0 {
		options.Tag = "json"
	}
	return []gors.Route{
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/ProtoBufBinding/ProtoBufRender",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTProtoBufBindingProtoBufRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoBufBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTProtoBufBindingProtoBufRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoBufRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/ProtoJSONBinding/ProtoJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTProtoJSONBindingProtoJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTProtoJSONBindingProtoJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/hellowrapper.Greeter/NotDefine",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/NotDefine"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.NotDefine(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/Error",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTError"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTError(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/wrapper/GRPCStatus",
			func(c *gin.Context) {
				var rpcMethodName = "/hellowrapper.Greeter/POSTGRPCStatus"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTGRPCStatus(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
	}
}
