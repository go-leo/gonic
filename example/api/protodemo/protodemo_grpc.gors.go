// Code generated by protoc-gen-go-gors. DO NOT EDIT.

package protodemo

import (
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

func ProtoDemoClientRoutes(cli ProtoDemoClient, opts ...gors.Option) []gors.Route {
	options := gors.New(opts...)
	_ = options
	if len(options.Tag) == 0 {
		options.Tag = "json"
	}
	return []gors.Route{
		gors.NewRoute(
			http.MethodDelete,
			"/v1/UriBinding/JSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/DELETEUriBindingJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.DELETEUriBindingJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.JSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodGet,
			"/v1/UriBinding/IndentedJSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/GETUriBindingIndentedJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.GETUriBindingIndentedJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.IndentedJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodGet,
			"/v1/UriQueryBinding/SecureJSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/GETUriQueryBindingSecureJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.GETUriQueryBindingSecureJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.SecureJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/HeaderFormPostBinding/JSONPJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTHeaderFormPostBindingJSONPJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.FormPostBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTHeaderFormPostBindingJSONPJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.JSONPJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPatch,
			"/v1/HeaderProtoFormBinding/PureJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/PATCHHeaderProtoFormBindingPureJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.FormBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.PATCHHeaderProtoFormBindingPureJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.PureJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPut,
			"/v1/HeaderJSONBinding/AsciiJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/PUTHeaderJSONBindingAsciiJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.JSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.PUTHeaderJSONBindingAsciiJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.AsciiJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/ProtoBufBinding/ProtoBufRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTProtoBufBindingProtoBufRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoBufBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTProtoBufBindingProtoBufRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoBufRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/ProtoJSONBinding/ProtoJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTProtoJSONBindingProtoJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTProtoJSONBindingProtoJSONRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/CustomBinding/CustomRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTCustomBindingCustomRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.CustomBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTCustomBindingCustomRender(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.CustomRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/protodemo.ProtoDemo/NotDefine",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/NotDefine"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.NotDefine(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/POSTSetHeaderTrailer",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTSetHeaderTrailer"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTSetHeaderTrailer(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/Error",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTError"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTError(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/GRPCStatus",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTGRPCStatus"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				var headerMD, trailerMD metadata.MD
				resp, err = cli.POSTGRPCStatus(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.AddGRPCMetadata(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
	}
}

func ProtoDemoServerRoutes(srv ProtoDemoServer, opts ...gors.Option) []gors.Route {
	options := gors.New(opts...)
	_ = options
	if len(options.Tag) == 0 {
		options.Tag = "json"
	}
	return []gors.Route{
		gors.NewRoute(
			http.MethodDelete,
			"/v1/UriBinding/JSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/DELETEUriBindingJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.DELETEUriBindingJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.JSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodGet,
			"/v1/UriBinding/IndentedJSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/GETUriBindingIndentedJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.GETUriBindingIndentedJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.IndentedJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodGet,
			"/v1/UriQueryBinding/SecureJSONRender/:name",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/GETUriQueryBindingSecureJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.GETUriQueryBindingSecureJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.SecureJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/HeaderFormPostBinding/JSONPJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTHeaderFormPostBindingJSONPJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.FormPostBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTHeaderFormPostBindingJSONPJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.JSONPJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPatch,
			"/v1/HeaderProtoFormBinding/PureJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/PATCHHeaderProtoFormBindingPureJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.FormBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.PATCHHeaderProtoFormBindingPureJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.PureJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPut,
			"/v1/HeaderJSONBinding/AsciiJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/PUTHeaderJSONBindingAsciiJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.HeaderBinding,
					gors.JSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.PUTHeaderJSONBindingAsciiJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.AsciiJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/ProtoBufBinding/ProtoBufRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTProtoBufBindingProtoBufRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoBufBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTProtoBufBindingProtoBufRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoBufRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/ProtoJSONBinding/ProtoJSONRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTProtoJSONBindingProtoJSONRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTProtoJSONBindingProtoJSONRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/CustomBinding/CustomRender",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTCustomBindingCustomRender"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.CustomBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTCustomBindingCustomRender(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.CustomRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/protodemo.ProtoDemo/NotDefine",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/NotDefine"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.NotDefine(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/POSTSetHeaderTrailer",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTSetHeaderTrailer"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTSetHeaderTrailer(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/Error",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTError"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTError(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/GRPCStatus",
			func(c *gin.Context) {
				var rpcMethodName = "/protodemo.ProtoDemo/POSTGRPCStatus"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.RequestBind(
					ctx, req, options.Tag,
					gors.ProtoJSONBinding,
				); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				stream := gors.NewServerTransportStream(rpcMethodName)
				ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
				resp, err = srv.POSTGRPCStatus(ctx, req)
				gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender, options.ResponseWrapper)
			},
		),
	}
}
