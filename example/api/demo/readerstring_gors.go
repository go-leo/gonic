// Code generated by "gors -service ReaderString"; DO NOT EDIT.

package demo

import (
	gin "github.com/gin-gonic/gin"
	render "github.com/gin-gonic/gin/render"
	gors "github.com/go-leo/gors"
	io "io"
	http "net/http"
)

func ReaderStringRoutes(srv ReaderString) []gors.Route {
	return []gors.Route{
		gors.NewRoute(
			http.MethodGet,
			"/api/ReaderString/Get",
			func(c *gin.Context) {
				var req io.Reader
				var resp string
				var err error
				req = c.Request.Body
				ctx := gors.NewContext(c)
				resp, err = srv.GetReaderString(ctx, req)
				switch e := err.(type) {
				case nil:
					statusCode := gors.HttpStatusCode(c, resp)
					c.Render(statusCode, render.Data{ContentType: "text/plain; charset=utf-8", Data: []byte(resp)})
					return
				case *gors.HttpError:
					c.String(e.StatusCode(), e.Error())
					_ = c.Error(e).SetType(gin.ErrorTypePublic)
					return
				default:
					c.String(http.StatusInternalServerError, err.Error())
					_ = c.Error(e).SetType(gin.ErrorTypePrivate)
					return
				}
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/api/ReaderString/Post",
			func(c *gin.Context) {
				var req io.Reader
				var resp string
				var err error
				req = c.Request.Body
				ctx := gors.NewContext(c)
				resp, err = srv.PostReaderString(ctx, req)
				switch e := err.(type) {
				case nil:
					statusCode := gors.HttpStatusCode(c, resp)
					c.Render(statusCode, render.Data{ContentType: "text/go", Data: []byte(resp)})
					return
				case *gors.HttpError:
					c.String(e.StatusCode(), e.Error())
					_ = c.Error(e).SetType(gin.ErrorTypePublic)
					return
				default:
					c.String(http.StatusInternalServerError, err.Error())
					_ = c.Error(e).SetType(gin.ErrorTypePrivate)
					return
				}
			},
		),
	}
}
