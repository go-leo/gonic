// Code generated by "gors -service BytesString"; DO NOT EDIT.

package demo

import (
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	io "io"
	http "net/http"
)

func BytesStringRoutes(srv BytesString, opts ...gors.Option) []gors.Route {
	options := gors.New(opts...)
	_ = options
	return []gors.Route{
		gors.NewRoute(
			http.MethodGet,
			"/api/BytesString/Get",
			func(c *gin.Context) {
				var rpcMethodName = "/demo.BytesString/GetBytesString"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req []byte
				var resp string
				var err error
				var body []byte
				body, err = io.ReadAll(c.Request.Body)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				req = body
				resp, err = srv.GetBytesString(ctx, req)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.HTMLRender, options.ResponseWrapper)
			},
		),
		gors.NewRoute(
			http.MethodPut,
			"/api/BytesString/Put",
			func(c *gin.Context) {
				var rpcMethodName = "/demo.BytesString/PutBytesString"
				var ctx = gors.NewContext(c, rpcMethodName)
				var req []byte
				var resp string
				var err error
				var body []byte
				body, err = io.ReadAll(c.Request.Body)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				req = body
				resp, err = srv.PutBytesString(ctx, req)
				if err != nil {
					gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
					return
				}
				gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.RedirectRender, options.ResponseWrapper)
			},
		),
	}
}
