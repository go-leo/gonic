// Code generated by "gors -service CustomBinderRender"; DO NOT EDIT.

package demo

import (
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	http "net/http"
)

func CustomBinderRenderRoutes(srv CustomBinderRender) []gors.Route {
	return []gors.Route{
		gors.NewRoute(
			http.MethodPost,
			"/api/CustomBinderRender/Custom",
			func(c *gin.Context) {
				var req *CustomReq
				var resp *CustomResp
				var err error
				req = new(CustomReq)
				var binding gors.Binding = req
				err = binding.Bind(c)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				if err = gors.Validate(req); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				ctx := gors.NewContext(c)
				resp, err = srv.Custom(ctx, req)
				if gors.IsInterrupted(ctx) {
					return
				}
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						_ = c.Error(err).SetType(gin.ErrorTypePublic)
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypePrivate)
					return
				}
				statusCode := gors.GetCodeFromContext(ctx)
				var render gors.Render = resp
				render.Render(c, statusCode)
			},
		),
	}
}
