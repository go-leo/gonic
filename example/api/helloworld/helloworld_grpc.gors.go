// Code generated by protoc-gen-go-gors. DO NOT EDIT.

package helloworld

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

func GreeterClientRoutes(cli GreeterClient) []gors.Route {
	return []gors.Route{
		gors.NewRoute(
			http.MethodGet,
			"/v1/SayHello",
			func(c *gin.Context) {
				var req *HelloRequest
				var resp *HelloReply
				var ctx context.Context
				var headerMD, trailerMD metadata.MD
				var err error
				req = new(HelloRequest)
				if err = gors.ShouldBind(
					c, req, "json",
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.FormBinding,
					gors.JSONBinding,
					gors.ProtoBufBinding,
					gors.CustomBinding,
					gors.MsgPackBinding,
				); err != nil {
					gors.GRPCErrorRender(c, err, headerMD, trailerMD, gors.JSONRender)
					return
				}
				if ctx, err = gors.NewGRPCContext(c, "/helloworld.Greeter/SayHello"); err != nil {
					gors.GRPCErrorRender(c, err, headerMD, trailerMD, gors.JSONRender)
					return
				}
				resp, err = cli.SayHello(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.JSONRender(c, gors.HTTPStatusCode(ctx), resp, "")
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/v2/p",
			func(c *gin.Context) {
				var req *HelloRequest
				var resp *HelloReply
				var ctx context.Context
				var headerMD, trailerMD metadata.MD
				var err error
				req = new(HelloRequest)
				if err = gors.ShouldBind(
					c, req, "json",
				); err != nil {
					gors.GRPCErrorRender(c, err, headerMD, trailerMD, gors.ProtoBufRender)
					return
				}
				if ctx, err = gors.NewGRPCContext(c, "/helloworld.Greeter/PostV2"); err != nil {
					gors.GRPCErrorRender(c, err, headerMD, trailerMD, gors.ProtoBufRender)
					return
				}
				resp, err = cli.PostV2(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				gors.ProtoBufRender(c, gors.HTTPStatusCode(ctx), resp, "")
			},
		),
	}
}

func GreeterServerRoutes(srv GreeterServer) []gors.Route {
	return []gors.Route{
		gors.NewRoute(
			http.MethodGet,
			"/v1/SayHello",
			func(c *gin.Context) {
				var req *HelloRequest
				var resp *HelloReply
				var ctx context.Context
				var stream gors.ServerTransportStream
				stream.SetMethod("/helloworld.Greeter/PostV2")
				var err error
				req = new(HelloRequest)
				if err = gors.ShouldBind(
					c, req, "json",
					gors.UriBinding,
					gors.QueryBinding,
					gors.HeaderBinding,
					gors.FormBinding,
					gors.JSONBinding,
					gors.ProtoBufBinding,
					gors.CustomBinding,
					gors.MsgPackBinding,
				); err != nil {
					gors.GRPCErrorRender(c, err, stream.Header(), stream.Trailer(), gors.JSONRender)
					return
				}
				if ctx, err = gors.NewGRPCContext(c, "/helloworld.Greeter/PostV2"); err != nil {
					gors.GRPCErrorRender(c, err, stream.Header(), stream.Trailer(), gors.JSONRender)
					return
				}
				resp, err = srv.SayHello(ctx, req)
				gors.JSONRender(c, gors.HTTPStatusCode(ctx), resp, "")
			},
		),
		gors.NewRoute(
			http.MethodPost,
			"/v1/v2/p",
			func(c *gin.Context) {
				var req *HelloRequest
				var resp *HelloReply
				var err error
				req = new(HelloRequest)
				if err = gors.ShouldBind(
					c, req, "json",
				); err != nil {
					gors.GRPCErrorRender(c, err, headerMD, trailerMD, gors.ProtoBufRender)
					return
				}
				ctx := gors.NewContext(c)
				resp, err = srv.PostV2(ctx, req)
				gors.ProtoBufRender(c, gors.HTTPStatusCode(ctx), resp, "")
			},
		),
	}
}
