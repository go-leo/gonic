// Code generated by protoc-gen-gonic. DO NOT EDIT.

package response_body

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	gonic "github.com/go-leo/gonic"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

type ResponseBodyGonicService interface {
	OmittedResponse(ctx context.Context, request *Request) (*Response, error)
	StarResponse(ctx context.Context, request *Request) (*Response, error)
	NamedResponse(ctx context.Context, request *Request) (*NamedBodyResponse, error)
	HttpBodyResponse(ctx context.Context, request *Request) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, request *Request) (*NamedHttpBodyResponse, error)
	HttpResponse(ctx context.Context, request *Request) (*http.HttpResponse, error)
}

func AppendResponseBodyGonicRoute[Router gin.IRoutes](router Router, service ResponseBodyGonicService, opts ...gonic.Option) Router {
	options := gonic.NewOptions(opts...)
	handler := responseBodyGonicHandler{
		service: service,
		decoder: responseBodyGonicRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: responseBodyGonicEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gonic.DefaultEncodeError,
	}
	router.Match([]string{"GET"}, "/v1/omitted/response", gonic.Chain(handler.OmittedResponse(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/star/response", gonic.Chain(handler.StarResponse(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/named/response", gonic.Chain(handler.NamedResponse(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/http/body/omitted/response", gonic.Chain(handler.HttpBodyResponse(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/http/body/named/response", gonic.Chain(handler.HttpBodyNamedResponse(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/http/response", gonic.Chain(handler.HttpResponse(), options.Middlewares()...)...)
	return router
}

type responseBodyGonicHandler struct {
	service      ResponseBodyGonicService
	decoder      responseBodyGonicRequestDecoder
	encoder      responseBodyGonicEncodeResponse
	errorEncoder gonic.ErrorEncoder
}

func (h responseBodyGonicHandler) OmittedResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.OmittedResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.OmittedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.OmittedResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h responseBodyGonicHandler) StarResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.StarResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.StarResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.StarResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h responseBodyGonicHandler) NamedResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.NamedResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.NamedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.NamedResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h responseBodyGonicHandler) HttpBodyResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpBodyResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpBodyResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpBodyResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h responseBodyGonicHandler) HttpBodyNamedResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpBodyNamedResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpBodyNamedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpBodyNamedResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h responseBodyGonicHandler) HttpResponse() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpResponse(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpResponse(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

type responseBodyGonicRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gonic.OnValidationErrCallback
}

func (decoder responseBodyGonicRequestDecoder) OmittedResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGonicRequestDecoder) StarResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGonicRequestDecoder) NamedResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGonicRequestDecoder) HttpBodyResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGonicRequestDecoder) HttpBodyNamedResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGonicRequestDecoder) HttpResponse(ctx *gin.Context) (*Request, error) {
	r := ctx.Request
	req := &Request{}
	if ok, err := gonic.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, gonic.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type responseBodyGonicEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gonic.ResponseTransformer
}

func (encoder responseBodyGonicEncodeResponse) OmittedResponse(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder responseBodyGonicEncodeResponse) StarResponse(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder responseBodyGonicEncodeResponse) NamedResponse(ctx *gin.Context, resp *NamedBodyResponse) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp.GetBody()), encoder.marshalOptions)
}
func (encoder responseBodyGonicEncodeResponse) HttpBodyResponse(ctx *gin.Context, resp *httpbody.HttpBody) error {
	return gonic.EncodeHttpBody(ctx, ctx.Writer, resp)
}
func (encoder responseBodyGonicEncodeResponse) HttpBodyNamedResponse(ctx *gin.Context, resp *NamedHttpBodyResponse) error {
	return gonic.EncodeHttpBody(ctx, ctx.Writer, resp.GetBody())
}
func (encoder responseBodyGonicEncodeResponse) HttpResponse(ctx *gin.Context, resp *http.HttpResponse) error {
	return gonic.EncodeHttpResponse(ctx, ctx.Writer, resp)
}
