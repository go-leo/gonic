// Code generated by protoc-gen-goose. DO NOT EDIT.

package response_body

import (
	context "context"
	goose "github.com/go-leo/goose"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	http1 "net/http"
)

type ResponseBodyGooseService interface {
	OmittedResponse(ctx context.Context, request *Request) (*Response, error)
	StarResponse(ctx context.Context, request *Request) (*Response, error)
	NamedResponse(ctx context.Context, request *Request) (*NamedBodyResponse, error)
	HttpBodyResponse(ctx context.Context, request *Request) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, request *Request) (*NamedHttpBodyResponse, error)
	HttpResponse(ctx context.Context, request *Request) (*http.HttpResponse, error)
}

func AppendResponseBodyGooseRoute(router *http1.ServeMux, service ResponseBodyGooseService, opts ...goose.Option) *http1.ServeMux {
	options := goose.NewOptions(opts...)
	handler := responseBodyGooseHandler{
		service: service,
		decoder: responseBodyGooseRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: responseBodyGooseEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: goose.DefaultEncodeError,
	}
	router.Handle("GET /v1/omitted/response", goose.Chain(handler.OmittedResponse(), options.Middlewares()...))
	router.Handle("GET /v1/star/response", goose.Chain(handler.StarResponse(), options.Middlewares()...))
	router.Handle("GET /v1/named/response", goose.Chain(handler.NamedResponse(), options.Middlewares()...))
	router.Handle("GET /v1/http/body/omitted/response", goose.Chain(handler.HttpBodyResponse(), options.Middlewares()...))
	router.Handle("GET /v1/http/body/named/response", goose.Chain(handler.HttpBodyNamedResponse(), options.Middlewares()...))
	router.Handle("GET /v1/http/response", goose.Chain(handler.HttpResponse(), options.Middlewares()...))
	return router
}

type responseBodyGooseHandler struct {
	service      ResponseBodyGooseService
	decoder      responseBodyGooseRequestDecoder
	encoder      responseBodyGooseEncodeResponse
	errorEncoder goose.ErrorEncoder
}

func (h responseBodyGooseHandler) OmittedResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.OmittedResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.OmittedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.OmittedResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h responseBodyGooseHandler) StarResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.StarResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.StarResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.StarResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h responseBodyGooseHandler) NamedResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NamedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h responseBodyGooseHandler) HttpBodyResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpBodyResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h responseBodyGooseHandler) HttpBodyNamedResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyNamedResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpBodyNamedResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyNamedResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h responseBodyGooseHandler) HttpResponse() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpResponse(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpResponse(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpResponse(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type responseBodyGooseRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback goose.OnValidationErrCallback
}

func (decoder responseBodyGooseRequestDecoder) OmittedResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGooseRequestDecoder) StarResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGooseRequestDecoder) NamedResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGooseRequestDecoder) HttpBodyResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGooseRequestDecoder) HttpBodyNamedResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder responseBodyGooseRequestDecoder) HttpResponse(ctx context.Context, r *http1.Request) (*Request, error) {
	req := &Request{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	queries := r.URL.Query()
	var queryErr error
	req.Message = queries.Get("message")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type responseBodyGooseEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer goose.ResponseTransformer
}

func (encoder responseBodyGooseEncodeResponse) OmittedResponse(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder responseBodyGooseEncodeResponse) StarResponse(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder responseBodyGooseEncodeResponse) NamedResponse(ctx context.Context, w http1.ResponseWriter, resp *NamedBodyResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp.GetBody()), encoder.marshalOptions)
}
func (encoder responseBodyGooseEncodeResponse) HttpBodyResponse(ctx context.Context, w http1.ResponseWriter, resp *httpbody.HttpBody) error {
	return goose.EncodeHttpBody(ctx, w, resp)
}
func (encoder responseBodyGooseEncodeResponse) HttpBodyNamedResponse(ctx context.Context, w http1.ResponseWriter, resp *NamedHttpBodyResponse) error {
	return goose.EncodeHttpBody(ctx, w, resp.GetBody())
}
func (encoder responseBodyGooseEncodeResponse) HttpResponse(ctx context.Context, w http1.ResponseWriter, resp *http.HttpResponse) error {
	return goose.EncodeHttpResponse(ctx, w, resp)
}
