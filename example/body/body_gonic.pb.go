// Code generated by protoc-gen-gonic. DO NOT EDIT.

package body

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	gonic "github.com/go-leo/gonic"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type BodyGonicService interface {
	StarBody(ctx context.Context, request *BodyRequest) (*Response, error)
	NamedBody(ctx context.Context, request *NamedBodyRequest) (*Response, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*Response, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*Response, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBodyRequest) (*Response, error)
	HttpRequest(ctx context.Context, request *http.HttpRequest) (*Response, error)
}

func AppendBodyGonicRoute[Router gin.IRoutes](router Router, service BodyGonicService, opts ...gonic.Option) Router {
	options := gonic.NewOptions(opts...)
	handler := bodyGonicHandler{
		service: service,
		decoder: bodyGonicRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: bodyGonicResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder:            gonic.DefaultEncodeError,
		shouldFailFast:          options.ShouldFailFast(),
		onValidationErrCallback: options.OnValidationErrCallback(),
	}
	router.Match([]string{"POST"}, "/v1/star/body", gonic.Chain(handler.StarBody(), options.Middlewares()...)...)
	router.Match([]string{"POST"}, "/v1/named/body", gonic.Chain(handler.NamedBody(), options.Middlewares()...)...)
	router.Match([]string{"GET"}, "/v1/user_body", gonic.Chain(handler.NonBody(), options.Middlewares()...)...)
	router.Match([]string{"PUT"}, "/v1/http/body/star/body", gonic.Chain(handler.HttpBodyStarBody(), options.Middlewares()...)...)
	router.Match([]string{"PUT"}, "/v1/http/body/named/body", gonic.Chain(handler.HttpBodyNamedBody(), options.Middlewares()...)...)
	router.Match([]string{"PUT"}, "/v1/http/request", gonic.Chain(handler.HttpRequest(), options.Middlewares()...)...)
	return router
}

type bodyGonicHandler struct {
	service                 BodyGonicService
	decoder                 bodyGonicRequestDecoder
	encoder                 bodyGonicResponseEncoder
	errorEncoder            gonic.ErrorEncoder
	shouldFailFast          bool
	onValidationErrCallback gonic.OnValidationErrCallback
}

func (h bodyGonicHandler) StarBody() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.StarBody(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.StarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.StarBody(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h bodyGonicHandler) NamedBody() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.NamedBody(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.NamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.NamedBody(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h bodyGonicHandler) NonBody() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.NonBody(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.NonBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.NonBody(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h bodyGonicHandler) HttpBodyStarBody() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpBodyStarBody(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpBodyStarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpBodyStarBody(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h bodyGonicHandler) HttpBodyNamedBody() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpBodyNamedBody(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpBodyNamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpBodyNamedBody(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

func (h bodyGonicHandler) HttpRequest() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		in, err := h.decoder.HttpRequest(ctx)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := gonic.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		out, err := h.service.HttpRequest(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
		if err := h.encoder.HttpRequest(ctx, out); err != nil {
			h.errorEncoder(ctx, err, ctx.Writer)
			return
		}
	})
}

type bodyGonicRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder bodyGonicRequestDecoder) StarBody(ctx *gin.Context) (*BodyRequest, error) {
	r := ctx.Request
	req := &BodyRequest{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if err := gonic.DecodeRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder bodyGonicRequestDecoder) NamedBody(ctx *gin.Context) (*NamedBodyRequest, error) {
	r := ctx.Request
	req := &NamedBodyRequest{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if req.Body == nil {
		req.Body = &NamedBodyRequest_Body{}
	}
	if err := gonic.DecodeRequest(ctx, r, req.Body, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder bodyGonicRequestDecoder) NonBody(ctx *gin.Context) (*emptypb.Empty, error) {
	r := ctx.Request
	req := &emptypb.Empty{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	return req, nil
}
func (decoder bodyGonicRequestDecoder) HttpBodyStarBody(ctx *gin.Context) (*httpbody.HttpBody, error) {
	r := ctx.Request
	req := &httpbody.HttpBody{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if err := gonic.DecodeHttpBody(ctx, r, req); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder bodyGonicRequestDecoder) HttpBodyNamedBody(ctx *gin.Context) (*HttpBodyRequest, error) {
	r := ctx.Request
	req := &HttpBodyRequest{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if req.Body == nil {
		req.Body = &httpbody.HttpBody{}
	}
	if err := gonic.DecodeHttpBody(ctx, r, req.Body); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder bodyGonicRequestDecoder) HttpRequest(ctx *gin.Context) (*http.HttpRequest, error) {
	r := ctx.Request
	req := &http.HttpRequest{}
	ok, err := gonic.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if err := gonic.DecodeHttpRequest(ctx, r, req); err != nil {
		return nil, err
	}
	return req, nil
}

type bodyGonicResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gonic.ResponseTransformer
}

func (encoder bodyGonicResponseEncoder) StarBody(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGonicResponseEncoder) NamedBody(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGonicResponseEncoder) NonBody(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGonicResponseEncoder) HttpBodyStarBody(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGonicResponseEncoder) HttpBodyNamedBody(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGonicResponseEncoder) HttpRequest(ctx *gin.Context, resp *Response) error {
	return gonic.EncodeResponse(ctx, ctx.Writer, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
