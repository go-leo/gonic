// Code generated by protoc-gen-goose. DO NOT EDIT.

package body

import (
	context "context"
	goose "github.com/go-leo/goose"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http1 "net/http"
)

type BodyGooseService interface {
	StarBody(ctx context.Context, request *BodyRequest) (*Response, error)
	NamedBody(ctx context.Context, request *NamedBodyRequest) (*Response, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*Response, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*Response, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBodyRequest) (*Response, error)
	HttpRequest(ctx context.Context, request *http.HttpRequest) (*Response, error)
}

func AppendBodyGooseRoute(router *http1.ServeMux, service BodyGooseService, opts ...goose.Option) *http1.ServeMux {
	options := goose.NewOptions(opts...)
	handler := bodyGooseHandler{
		service: service,
		decoder: bodyGooseRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: bodyGooseEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: goose.DefaultEncodeError,
	}
	router.Handle("POST /v1/star/body", goose.Chain(handler.StarBody(), options.Middlewares()...))
	router.Handle("POST /v1/named/body", goose.Chain(handler.NamedBody(), options.Middlewares()...))
	router.Handle("GET /v1/user_body", goose.Chain(handler.NonBody(), options.Middlewares()...))
	router.Handle("PUT /v1/http/body/star/body", goose.Chain(handler.HttpBodyStarBody(), options.Middlewares()...))
	router.Handle("PUT /v1/http/body/named/body", goose.Chain(handler.HttpBodyNamedBody(), options.Middlewares()...))
	router.Handle("PUT /v1/http/request", goose.Chain(handler.HttpRequest(), options.Middlewares()...))
	return router
}

type bodyGooseHandler struct {
	service      BodyGooseService
	decoder      bodyGooseRequestDecoder
	encoder      bodyGooseEncodeResponse
	errorEncoder goose.ErrorEncoder
}

func (h bodyGooseHandler) StarBody() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.StarBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.StarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.StarBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h bodyGooseHandler) NamedBody() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h bodyGooseHandler) NonBody() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.NonBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NonBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NonBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h bodyGooseHandler) HttpBodyStarBody() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyStarBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpBodyStarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyStarBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h bodyGooseHandler) HttpBodyNamedBody() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyNamedBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpBodyNamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyNamedBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h bodyGooseHandler) HttpRequest() http1.Handler {
	return http1.HandlerFunc(func(writer http1.ResponseWriter, request *http1.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpRequest(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.HttpRequest(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpRequest(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type bodyGooseRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback goose.OnValidationErrCallback
}

func (decoder bodyGooseRequestDecoder) StarBody(ctx context.Context, r *http1.Request) (*BodyRequest, error) {
	req := &BodyRequest{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	if err := goose.DecodeRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder bodyGooseRequestDecoder) NamedBody(ctx context.Context, r *http1.Request) (*NamedBodyRequest, error) {
	req := &NamedBodyRequest{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	if req.Body == nil {
		req.Body = &NamedBodyRequest_Body{}
	}
	if err := goose.DecodeRequest(ctx, r, req.Body, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder bodyGooseRequestDecoder) NonBody(ctx context.Context, r *http1.Request) (*emptypb.Empty, error) {
	req := &emptypb.Empty{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder bodyGooseRequestDecoder) HttpBodyStarBody(ctx context.Context, r *http1.Request) (*httpbody.HttpBody, error) {
	req := &httpbody.HttpBody{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	if err := goose.DecodeHttpBody(ctx, r, req); err != nil {
		return nil, err
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder bodyGooseRequestDecoder) HttpBodyNamedBody(ctx context.Context, r *http1.Request) (*HttpBodyRequest, error) {
	req := &HttpBodyRequest{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	if req.Body == nil {
		req.Body = &httpbody.HttpBody{}
	}
	if err := goose.DecodeHttpBody(ctx, r, req.Body); err != nil {
		return nil, err
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}
func (decoder bodyGooseRequestDecoder) HttpRequest(ctx context.Context, r *http1.Request) (*http.HttpRequest, error) {
	req := &http.HttpRequest{}
	if ok, err := goose.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	if err := goose.DecodeHttpRequest(ctx, r, req); err != nil {
		return nil, err
	}
	return req, goose.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type bodyGooseEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer goose.ResponseTransformer
}

func (encoder bodyGooseEncodeResponse) StarBody(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGooseEncodeResponse) NamedBody(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGooseEncodeResponse) NonBody(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGooseEncodeResponse) HttpBodyStarBody(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGooseEncodeResponse) HttpBodyNamedBody(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder bodyGooseEncodeResponse) HttpRequest(ctx context.Context, w http1.ResponseWriter, resp *Response) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
