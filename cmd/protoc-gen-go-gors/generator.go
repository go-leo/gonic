package main

import (
	//"strings"

	"bufio"
	"fmt"
	"github.com/go-leo/gors/internal/pkg/gors"
	"github.com/go-leo/gors/internal/pkg/httpmethod"
	"google.golang.org/protobuf/compiler/protogen"
	"path"
	"strconv"
	"strings"
)

const (
	metadataPackage = protogen.GoImportPath("google.golang.org/grpc/metadata")
	grpcPackage     = protogen.GoImportPath("google.golang.org/grpc")
	ginPackage      = protogen.GoImportPath("github.com/gin-gonic/gin")
	httpPackage     = protogen.GoImportPath("net/http")
	gorsPackage     = protogen.GoImportPath("github.com/go-leo/gors")
	bindingPackage  = protogen.GoImportPath("github.com/gin-gonic/gin/binding")
	contextPackage  = protogen.GoImportPath("context")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.gors.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gors. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		if err := genClientFunction(gen, file, g, service); err != nil {
			gen.Error(err)
			return
		}
		g.P()
		if err := genServerFunction(gen, file, g, service); err != nil {
			gen.Error(err)
			return
		}
	}
}

func genClientFunction(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) error {
	clientName := service.GoName + "Client"
	funcName := clientName + "Routes"

	basePath := extractBasePath(service)
	g.P("func ", funcName, "(cli ", clientName, ", opts ...", gorsPackage.Ident("Option"), ") []", gorsPackage.Ident("Route"), " {")
	g.P("options := ", gorsPackage.Ident("New"), "(opts...)")
	g.P("_ = options")
	g.P("if len(options.Tag) == 0 {")
	g.P("options.Tag = ", strconv.Quote("json"))
	g.P("}")
	g.P("return []", gorsPackage.Ident("Route"), "{")
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			fmName := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())

			router := newRouter(method, basePath, fmName)
			g.P(gorsPackage.Ident("NewRoute"), "(")
			g.P(httpPackage.Ident(router.Method), ",")
			g.P(strconv.Quote(router.Path), ",")
			g.P("func(c *", ginPackage.Ident("Context"), ") {")
			g.P("var rpcMethodName = ", strconv.Quote(fmName))
			g.P("var ctx = ", gorsPackage.Ident("NewContext"), "(c, rpcMethodName)")
			g.P("var req *", method.Input.GoIdent)
			g.P("var resp *", method.Output.GoIdent)
			g.P("var err error")
			g.P("req = new(", method.Input.GoIdent, ")")

			err := printRequestBinding(gen, g, router, fmName)
			if err != nil {
				return err
			}

			g.P("if ctx, err = ", gorsPackage.Ident("NewGRPCContext"), "(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {")
			g.P(gorsPackage.Ident("ErrorRender"), "(ctx, err, options.ErrorHandler, options.ResponseWrapper)")
			g.P("return")
			g.P("}")

			g.P("var headerMD, trailerMD ", metadataPackage.Ident("MD"))
			g.P("resp, err = cli.", method.GoName, "(ctx, req, ", grpcPackage.Ident("Header"), "(&headerMD), ", grpcPackage.Ident("Trailer"), "(&trailerMD))")
			g.P(gorsPackage.Ident("AddGRPCMetadata"), "(ctx, headerMD, trailerMD, options.OutgoingHeaderMatcher)")
			g.P("if err != nil {")
			g.P(gorsPackage.Ident("ErrorRender"), "(ctx, err, options.ErrorHandler, options.ResponseWrapper)")
			g.P("return")
			g.P("}")

			if err := printResponseRender(gen, g, router, fmName); err != nil {
				return err
			}

			g.P("},")
			g.P("),")
		} else {
			// Streaming RPC method
			continue
		}
	}
	g.P("}")
	g.P("}")
	return nil
}

func genServerFunction(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) error {
	serverName := service.GoName + "Server"
	funcName := serverName + "Routes"

	basePath := extractBasePath(service)
	g.P("func ", funcName, "(srv ", serverName, ", opts ...", gorsPackage.Ident("Option"), ") []", gorsPackage.Ident("Route"), " {")
	g.P("options := ", gorsPackage.Ident("New"), "(opts...)")
	g.P("_ = options")
	g.P("if len(options.Tag) == 0 {")
	g.P("options.Tag = ", strconv.Quote("json"))
	g.P("}")
	g.P("return []", gorsPackage.Ident("Route"), "{")
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			fmName := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())

			router := newRouter(method, basePath, fmName)
			g.P(gorsPackage.Ident("NewRoute"), "(")
			g.P(httpPackage.Ident(router.Method), ",")
			g.P(strconv.Quote(router.Path), ",")
			g.P("func(c *", ginPackage.Ident("Context"), ") {")
			g.P("var rpcMethodName = ", strconv.Quote(fmName))
			g.P("var ctx = ", gorsPackage.Ident("NewContext"), "(c, rpcMethodName)")
			g.P("var req *", method.Input.GoIdent)
			g.P("var resp *", method.Output.GoIdent)
			g.P("var err error")
			g.P("req = new(", method.Input.GoIdent, ")")

			err := printRequestBinding(gen, g, router, fmName)
			if err != nil {
				return err
			}

			g.P("if ctx, err = ", gorsPackage.Ident("NewGRPCContext"), "(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {")
			g.P(gorsPackage.Ident("ErrorRender"), "(ctx, err, options.ErrorHandler, options.ResponseWrapper)")
			g.P("return")
			g.P("}")

			g.P("stream := ", gorsPackage.Ident("NewServerTransportStream"), "(rpcMethodName)")
			g.P("ctx = ", grpcPackage.Ident("NewContextWithServerTransportStream"), "(ctx, stream)")
			g.P("resp, err = srv.", method.GoName, "(ctx, req)")
			g.P(gorsPackage.Ident("AddGRPCMetadata"), "(ctx, stream.Header(), stream.Trailer(), options.OutgoingHeaderMatcher)")
			g.P("if err != nil {")
			g.P(gorsPackage.Ident("ErrorRender"), "(ctx, err, options.ErrorHandler, options.ResponseWrapper)")
			g.P("return")
			g.P("}")

			if err := printResponseRender(gen, g, router, fmName); err != nil {
				return err
			}

			g.P("},")
			g.P("),")
		} else {
			// Streaming RPC method
			continue
		}
	}
	g.P("}")
	g.P("}")

	return nil
}

func printRequestBinding(gen *protogen.Plugin, g *protogen.GeneratedFile, router *gors.RouterInfo, fmName string) error {
	var bindings []string
	if router.UriBinding {
		bindings = append(bindings, "UriBinding")
	}
	if router.QueryBinding {
		bindings = append(bindings, "QueryBinding")
	}
	if router.HeaderBinding {
		bindings = append(bindings, "HeaderBinding")
	}
	if router.FormBinding {
		bindings = append(bindings, "FormBinding")
	}
	if router.FormPostBinding {
		bindings = append(bindings, "FormPostBinding")
	}
	if router.JSONBinding {
		bindings = append(bindings, "JSONBinding")
	}
	if router.ProtoBufBinding {
		bindings = append(bindings, "ProtoBufBinding")
	}
	if router.CustomBinding {
		bindings = append(bindings, "CustomBinding")
	}

	if router.ProtoJSONBinding {
		bindings = append(bindings, "ProtoJSONBinding")
	}
	if router.MsgPackBinding {
		return fmt.Errorf("%s, @MsgPackBinding is not supported", fmName)
	}
	if router.XMLBinding {
		return fmt.Errorf("%s, @XMLBinding is not supported", fmName)
	}
	if router.YAMLBinding {
		return fmt.Errorf("%s, @YAMLBinding is not supported", fmName)
	}
	if router.TOMLBinding {
		return fmt.Errorf("%s, @TOMLBinding is not supported", fmName)
	}
	g.P("if err = ", gorsPackage.Ident("RequestBind"), "(")
	g.P("ctx, req, options.Tag,")
	for _, binding := range bindings {
		g.P(gorsPackage.Ident(binding), ",")
	}
	g.P("); err != nil {")

	g.P(gorsPackage.Ident("ErrorRender"), "(ctx, err, options.ErrorHandler, options.ResponseWrapper)")
	g.P("return")
	g.P("}")
	return nil
}

func printResponseRender(gen *protogen.Plugin, g *protogen.GeneratedFile, router *gors.RouterInfo, fmName string) error {
	var renderMethodName string
	switch {
	case router.JSONRender:
		renderMethodName = "JSONRender"
	case router.IndentedJSONRender:
		renderMethodName = "IndentedJSONRender"
	case router.SecureJSONRender:
		renderMethodName = "SecureJSONRender"
	case router.JSONPJSONRender:
		renderMethodName = "JSONPJSONRender"
	case router.PureJSONRender:
		renderMethodName = "PureJSONRender"
	case router.AsciiJSONRender:
		renderMethodName = "AsciiJSONRender"
	case router.ProtoJSONRender:
		renderMethodName = "ProtoJSONRender"
	case router.ProtoBufRender:
		renderMethodName = "ProtoBufRender"
	case router.CustomRender:
		renderMethodName = "CustomRender"

	case router.BytesRender:
		return fmt.Errorf("%s, @BytesRender is not supported", fmName)
	case router.StringRender:
		return fmt.Errorf("%s, @StringRender is not supported", fmName)
	case router.TextRender:
		return fmt.Errorf("%s, @TextRender is not supported", fmName)
	case router.HTMLRender:
		return fmt.Errorf("%s, @HTMLRender is not supported", fmName)
	case router.RedirectRender:
		return fmt.Errorf("%s, @RedirectRender is not supported", fmName)
	case router.ReaderRender:
		return fmt.Errorf("%s, @ReaderRender is not supported", fmName)
	case router.XMLRender:
		return fmt.Errorf("%s, @XMLRender is not supported", fmName)
	case router.YAMLRender:
		return fmt.Errorf("%s, @YAMLRender is not supported", fmName)
	case router.TOMLRender:
		return fmt.Errorf("%s, @TOMLRender is not supported", fmName)
	case router.MsgPackRender:
		return fmt.Errorf("%s, @MsgPackRender is not supported", fmName)
	default:
		return fmt.Errorf("%s, render not defined", fmName)
	}
	g.P(gorsPackage.Ident("ResponseRender"),
		"(ctx, ", gorsPackage.Ident("StatusCode"), "(ctx), resp,",
		strconv.Quote(router.RenderContentType), ",", gorsPackage.Ident(renderMethodName),
		", options.ResponseWrapper)")

	return nil
}

func renderMethodName(router *gors.RouterInfo, fmName string) (string, error) {
	switch {
	case router.JSONRender:
		return "JSONRender", nil
	case router.IndentedJSONRender:
		return "IndentedJSONRender", nil
	case router.SecureJSONRender:
		return "SecureJSONRender", nil
	case router.JSONPJSONRender:
		return "JSONPJSONRender", nil
	case router.PureJSONRender:
		return "PureJSONRender", nil
	case router.AsciiJSONRender:
		return "AsciiJSONRender", nil
	case router.ProtoBufRender:
		return "ProtoBufRender", nil
	case router.MsgPackRender:
		return "MsgPackRender", nil
	case router.CustomRender:
		return "CustomRender", nil
	case router.ProtoJSONRender:
		return "ProtoJSONRender", nil

	case router.BytesRender:
		return "", fmt.Errorf("%s, @BytesRender is not supported", fmName)
	case router.StringRender:
		return "", fmt.Errorf("%s, @StringRender is not supported", fmName)
	case router.TextRender:
		return "", fmt.Errorf("%s, @TextRender is not supported", fmName)
	case router.HTMLRender:
		return "", fmt.Errorf("%s, @HTMLRender is not supported", fmName)
	case router.RedirectRender:
		return "", fmt.Errorf("%s, @RedirectRender is not supported", fmName)
	case router.ReaderRender:
		return "", fmt.Errorf("%s, @ReaderRender is not supported", fmName)
	case router.XMLRender:
		return "", fmt.Errorf("%s, @XMLRender is not supported", fmName)
	case router.YAMLRender:
		return "", fmt.Errorf("%s, @YAMLRender is not supported", fmName)
	case router.TOMLRender:
		return "", fmt.Errorf("%s, @TOMLRender is not supported", fmName)
	default:
		return "", fmt.Errorf("%s, render not defined", fmName)
	}
}

func extractBasePath(service *protogen.Service) string {
	return gors.ExtractBasePath(splitComment(service.Comments.Leading.String()))
}

func newRouter(method *protogen.Method, basePath string, fmName string) *gors.RouterInfo {
	router := gors.NewRouter(method.GoName, basePath, splitComment(method.Comments.Leading.String()))
	if router == nil {
		router = defaultRouter(method, basePath, fmName)
	}
	return router
}

func defaultRouter(method *protogen.Method, basePath string, fmName string) *gors.RouterInfo {
	path := path.Join(basePath, fmName)
	if *pathToLower {
		path = strings.ToLower(path)
	}
	return &gors.RouterInfo{
		Method:           httpmethod.PostMethod,
		Path:             path,
		UriBinding:       true,
		QueryBinding:     true,
		HeaderBinding:    true,
		ProtoJSONBinding: true,
		ProtoJSONRender:  true,
		RpcMethodName:    fmName,
	}
}

func splitComment(leadingComment string) []string {
	var comments []string
	scanner := bufio.NewScanner(strings.NewReader(leadingComment))
	for scanner.Scan() {
		line := scanner.Text()
		comments = append(comments, line)
	}
	return comments
}
