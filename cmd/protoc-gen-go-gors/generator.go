package main

import (
	//"strings"

	"bufio"
	"github.com/go-leo/gors/internal/pkg/gors"
	"google.golang.org/protobuf/compiler/protogen"
	"strconv"
	"strings"
)

const (
	metadataPackage = protogen.GoImportPath("google.golang.org/grpc/metadata")
	grpcPackage     = protogen.GoImportPath("google.golang.org/grpc")
	ginPackage      = protogen.GoImportPath("github.com/gin-gonic/gin")
	httpPackage     = protogen.GoImportPath("net/http")
	gorsPackage     = protogen.GoImportPath("github.com/go-leo/gors")
	bindingPackage  = protogen.GoImportPath("github.com/gin-gonic/gin/binding")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.gors.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gors. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genFunction(gen, file, g, service)
	}
}

func genFunction(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	funcName := service.GoName + "Routes"
	clientName := service.GoName + "Client"

	basePath := extractBasePath(service)
	g.P("// basePath: ", basePath)
	g.P("func ", funcName, "(cli ", clientName, ") []", gorsPackage.Ident("Route"), " {")
	g.P("return []", gorsPackage.Ident("Route"), "{")
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			router := newRouter(method, basePath)
			g.P(gorsPackage.Ident("NewRoute"), "(")
			g.P(httpPackage.Ident(router.Method), ",")
			g.P(strconv.Quote(router.Path), ",")
			g.P("func(c *", ginPackage.Ident("Context"), ") {")
			g.P("var req *", method.Input.GoIdent)
			g.P("var resp *", method.Output.GoIdent)
			g.P("var err error")
			g.P("req = new(", method.Input.GoIdent, ")")
			if router.UriBinding {
				printMapBinding(g, "UriParams")
			}
			if router.QueryBinding {
				printMapBinding(g, "QueryParams")
			}
			if router.HeaderBinding {
				printMapBinding(g, "HeaderParams")
			}
			//if router.JSONBinding {
			//	g.printBindRequest("JSON")
			//}
			//if router.XMLBinding {
			//	g.printBindRequest("XML")
			//}
			//if router.FormBinding {
			//	g.printBindRequest("Form")
			//}
			//if router.FormPostBinding {
			//	g.printBindRequest("FormPost")
			//}
			//if router.FormMultipartBinding {
			//	g.printBindRequest("FormMultipart")
			//}
			//if router.ProtobufBinding {
			//	g.printBindRequest("ProtoBuf")
			//}
			//if router.MsgPackBinding {
			//	g.printBindRequest("MsgPack")
			//}
			//if router.YAMLBinding {
			//	g.printBindRequest("YAML")
			//}
			//if router.TOMLBinding {
			//	g.printBindRequest("TOML")
			//}
			//if router.CustomBinding {
			//	g.printCustomRequest("Custom")
			//}
			g.P("},")
			g.P("),")
			//	req := new(HelloRequest)
			//	if err := grpcproxy.GetBind(c, req); err != nil {
			//		c.String(http.StatusBadRequest, err.Error())
			//		_ = c.Error(err).SetType(gin.ErrorTypeBind)
			//		return
			//	}
			//	ctx := grpcproxy.NewContext(c)
			//	var headerMD, trailerMD metadata.MD
			//	resp, err := cli.SayHello(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
			//	grpcproxy.Render(c, headerMD, trailerMD, resp, err)
		} else {
			// Streaming RPC method
			continue
		}
	}
	g.P("}")
	g.P("}")
}

func printMapBinding(g *protogen.GeneratedFile, paramMethodName string) {
	g.P("if err := ", bindingPackage.Ident("MapFormWithTag"), "(req, ", gorsPackage.Ident(paramMethodName), "(c), ", strconv.Quote("json"), "); err != nil {")
	g.P("c.String(", httpPackage.Ident("StatusBadRequest"), ", err.Error())")
	g.P("_ = c.Error(err).SetType(", ginPackage.Ident("ErrorTypeBind"), ")")
	g.P("return")
	g.P("}")
}

func extractBasePath(service *protogen.Service) string {
	return gors.ExtractBasePath(splitComment(service.Comments.Leading.String()))
}

func newRouter(method *protogen.Method, basePath string) *gors.RouterInfo {
	return gors.NewRouter(method.GoName, basePath, splitComment(method.Comments.Leading.String()))
}

func splitComment(leadingComment string) []string {
	var comments []string
	scanner := bufio.NewScanner(strings.NewReader(leadingComment))
	for scanner.Scan() {
		line := scanner.Text()
		comments = append(comments, line)
	}
	return comments
}
