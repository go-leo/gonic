// Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-gors. DO NOT EDIT.
// versions:
// - protoc-gen-gors v1.3.0
// - protoc             v4.24.3
// source: cmd/protoc-gen-gors/examples/tests/openapiv3annotations/message.proto

package message

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

func Messaging1ServiceRoutes(svc Messaging1Service, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging1ServiceWrapper{svc: svc, options: options}
	return []gors.Route{
		gors.NewRoute("PATCH", "/v1/messages/:message_id", _Messaging1_UpdateMessage_GORS_Handler(wrapper, options, _Messaging1_UpdateMessage_GORS_Handler_PATCH_71b8052a59ef2e1e6bb26f276891271b_Parameter())),
	}
}

func Messaging2ServiceRoutes(svc Messaging2Service, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging2ServiceWrapper{svc: svc, options: options}
	return []gors.Route{}
}

func Messaging1ServerRoutes(srv Messaging1Server, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging1ServerWrapper{srv: srv, options: options}
	return []gors.Route{
		gors.NewRoute("PATCH", "/v1/messages/:message_id", _Messaging1_UpdateMessage_GORS_Handler(wrapper, options, _Messaging1_UpdateMessage_GORS_Handler_PATCH_71b8052a59ef2e1e6bb26f276891271b_Parameter())),
	}
}

func Messaging2ServerRoutes(srv Messaging2Server, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging2ServerWrapper{srv: srv, options: options}
	return []gors.Route{}
}

func Messaging1ClientRoutes(cli Messaging1Client, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging1ClientWrapper{cli: cli, options: options}
	return []gors.Route{
		gors.NewRoute("PATCH", "/v1/messages/:message_id", _Messaging1_UpdateMessage_GORS_Handler(wrapper, options, _Messaging1_UpdateMessage_GORS_Handler_PATCH_71b8052a59ef2e1e6bb26f276891271b_Parameter())),
	}
}

func Messaging2ClientRoutes(cli Messaging2Client, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_Messaging2ClientWrapper{cli: cli, options: options}
	return []gors.Route{}
}

// Messaging1Service is the service API for Messaging1 service.
type Messaging1Service interface {
	UpdateMessage(context.Context, *Message) (*Message, error)
}

// Messaging2Service is the service API for Messaging2 service.
type Messaging2Service interface {
	UpdateMessage(context.Context, *Message) (*Message, error)
}

var _ Messaging1Service = (*_Messaging1ServiceWrapper)(nil)

type _Messaging1ServiceWrapper struct {
	svc     Messaging1Service
	options *gors.Options
}

func (wrapper *_Messaging1ServiceWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	return wrapper.svc.UpdateMessage(ctx, request)
}

var _ Messaging2Service = (*_Messaging2ServiceWrapper)(nil)

type _Messaging2ServiceWrapper struct {
	svc     Messaging2Service
	options *gors.Options
}

func (wrapper *_Messaging2ServiceWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	return wrapper.svc.UpdateMessage(ctx, request)
}

var _ Messaging1Service = (*_Messaging1ServerWrapper)(nil)

// _Messaging1ServerWrapper implement Messaging1Service and wrap gRPC Messaging1Server
type _Messaging1ServerWrapper struct {
	srv     Messaging1Server
	options *gors.Options
}

func (wrapper *_Messaging1ServerWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	rpcMethodName := "/tests.openapiv3annotations.message.v1.Messaging1/UpdateMessage"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.UpdateMessage(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

var _ Messaging2Service = (*_Messaging2ServerWrapper)(nil)

// _Messaging2ServerWrapper implement Messaging2Service and wrap gRPC Messaging2Server
type _Messaging2ServerWrapper struct {
	srv     Messaging2Server
	options *gors.Options
}

func (wrapper *_Messaging2ServerWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	rpcMethodName := "/tests.openapiv3annotations.message.v1.Messaging2/UpdateMessage"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.UpdateMessage(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

var _ Messaging1Service = (*_Messaging1ClientWrapper)(nil)

// _Messaging1ClientWrapper implement Messaging1Service and wrap gRPC Messaging1Client
type _Messaging1ClientWrapper struct {
	cli     Messaging1Client
	options *gors.Options
}

func (wrapper *_Messaging1ClientWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.UpdateMessage(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

var _ Messaging2Service = (*_Messaging2ClientWrapper)(nil)

// _Messaging2ClientWrapper implement Messaging2Service and wrap gRPC Messaging2Client
type _Messaging2ClientWrapper struct {
	cli     Messaging2Client
	options *gors.Options
}

func (wrapper *_Messaging2ClientWrapper) UpdateMessage(ctx context.Context, request *Message) (*Message, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.UpdateMessage(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func _Messaging1_UpdateMessage_GORS_Handler(svc Messaging1Service, options *gors.Options, payload *gors.Payload) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/tests.openapiv3annotations.message.v1.Messaging1/UpdateMessage"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *Message
		var resp *Message
		var err error
		req = new(Message)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.UpdateMessage(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
	}
}

func _Messaging2_UpdateMessage_GORS_Handler(svc Messaging2Service, options *gors.Options, payload *gors.Payload) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/tests.openapiv3annotations.message.v1.Messaging2/UpdateMessage"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *Message
		var resp *Message
		var err error
		req = new(Message)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.UpdateMessage(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
	}
}

func _Messaging1_UpdateMessage_GORS_Handler_PATCH_71b8052a59ef2e1e6bb26f276891271b_Parameter() *gors.Payload {
	return &gors.Payload{
		Path: []*gors.PathParameter{
			{Name: "message_id", Type: "string"},
		},
		Body: &gors.BodyParameter{
			Name: "*",
			Type: "object",
		},
	}
}
